// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//? User Management
model User {
  id        Int    @id @default(autoincrement()) // Primary key with auto-increment
  firstName String
  lastName  String
  email     String
  password  String

  // Timestamps
  createdAt DateTime @default(now()) // Automatically manages created timestamp
  updatedAt DateTime @updatedAt // Automatically updates timestamp on changes

  // Soft deletion 
  deletedAt DateTime?

  //Foreing Keys
  UserRole    UserRole[]
  UserAccount UserAccount[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft deletion 
  deletedAt DateTime?

  // Relations
  RolePermission RolePermission[]
  UserRole       UserRole[]
}

model Permission {
  id   Int    @id @default(autoincrement())
  name String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft deletion 
  deletedAt DateTime?

  // Relations
  RolePermission RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int

  // Foreign keys
  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  // Soft deletion 
  deletedAt DateTime?

  // Composite primary key (since this is a junction tabl)
  @@id([roleId, permissionId])
}

model UserRole {
  userId Int
  roleId Int

  // Foreign keys
  role Role @relation(fields: [roleId], references: [id])
  user User @relation(fields: [userId], references: [id])

  // Soft deletion 
  deletedAt DateTime?

  @@id([roleId, userId])
}

model UserAccount {
  userId    Int
  accountId Int

  // Foreign keys
  user    User    @relation(fields: [userId], references: [id])
  account Account @relation(fields: [accountId], references: [id])

  // Soft deletion 
  deletedAt DateTime?

  @@id([userId, accountId])
}

//? Account Management
model Account {
  id     Int    @id @default(autoincrement())
  name   String
  typeId Int

  // Timestamps
  createdAt DateTime @default(now()) // Automatically manages created timestamp
  updatedAt DateTime @updatedAt // Automatically updates timestamp on changes

  // Soft deletion 
  deletedAt DateTime?

  //Foreign Keys
  type        AccountType   @relation(fields: [typeId], references: [id])
  shops       Shop[]
  UserAccount UserAccount[]
}

model AccountType {
  id   Int    @id @default(autoincrement())
  name String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft deletion 
  deletedAt DateTime?

  accounts Account[]
}

//? Shop Management
model Shop {
  id           Int    @id @default(autoincrement())
  name         String
  businessName String
  email        String
  industryId   Int
  accountId    Int
  address      String
  phone        String

  // Timestamps
  createdAt DateTime @default(now()) // Automatically manages created timestamp
  updatedAt DateTime @updatedAt // Automatically updates timestamp on changes

  // Soft deletion 
  deletedAt DateTime?

  //Relations
  account  Account      @relation(fields: [accountId], references: [id])
  industry ShopIndustry @relation(fields: [industryId], references: [id])
}

model ShopIndustry {
  id   Int    @id @default(autoincrement())
  name String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft deletion 
  deletedAt DateTime?

  shops Shop[]
}

model Transaction {
  id             Int      @id @default(autoincrement())
  amount         Int
  dateTime       DateTime
  typeId         Int
  shopId         Int
  isModifiedFrom Int?
  isModifiedTo   Int?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft deletion 
  deletedAt DateTime?
}

model SaleType {
  id   Int    @id @default(autoincrement())
  name String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Soft deletion 
  deletedAt DateTime?
}
